paste("Slope:", round(mylm$coef[[2]], 3), "  (", beta_1, ")"),
paste("Sigma:", round(summary(mylm)$sigma, 3), "  (", sigma, ")")), bty='n')
#Draw diagnostic plots
plot(mylm, which=1:2)
plot(mylm$residuals, ylab="Residuals")
mtext("Residuals vs Order", side=3)
# Create Data from a True Model
n <- 30                           #sample size
beta_0 <- 14.2                    #True y-intercept
beta_1 <- 3.5                     #True slope
X_i <- runif(n, 0, 20)            #Sample of X-values
sigma <- 2.5                      #True standard deviation
epsilon_i <- rnorm(n, 0, sigma)   #normally distributed errors
epsilon_i[3] <- ifelse(X_i[3] < 10, runif(1,25,35), -runif(1,25,35))
#create outlier
Y_i <- beta_0 + beta_1*X_i + epsilon_i
#Sample of Y-values from model
# Plot the Data and Fitted Model
mylm <- lm(Y_i ~ X_i)            #Fit Model to Data
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),
widths=c(2,2,2), heights=c(4,2,2))
#create plot panel
plot(Y_i ~ X_i,                  #Plot the data
pch=16,
col="darkgray",
xlim=c(0,20),
ylim=c(0,100),
main="An Outlier Present")
abline(mylm, col="gray")         #Add fitted line to plot
abline(beta_0, beta_1,           #Add True line to plot
col="gray", lty=2)
#Summarize the Model Fit
pander(rbind(`Y-Intercept` = c(True = beta_0, Estimated = mylm$coef[[1]]),
Slope = c(True = beta_1, Estimated = mylm$coef[[2]]),
Sigma = c(True = sigma, Estimated = summary(mylm)$sigma)))
#Add summary to plot
legend("topleft", legend=c(paste("Y-Intercept:", round(mylm$coef[[1]], 3), "  (", beta_0, ")"),
paste("Slope:", round(mylm$coef[[2]], 3), "  (", beta_1, ")"),
paste("Sigma:", round(summary(mylm)$sigma, 3), "  (", sigma, ")")), bty='n')
#Draw diagnostic plots
plot(mylm, which=1:2)
plot(mylm$residuals, ylab="Residuals")
mtext("Residuals vs Order", side=3)
# Create Data from a True Model
n <- 30                           #sample size
beta_0 <- 14.2                    #True y-intercept
beta_1 <- 3.5                     #True slope
X_i <- runif(n, 0, 20)            #Sample of X-values
sigma <- 2.5                      #True standard deviation
epsilon_i <- rnorm(n, 0, sigma)   #normally distributed errors
epsilon_i[3] <- ifelse(X_i[3] < 10, runif(1,25,35), -runif(1,25,35))
#create outlier
Y_i <- beta_0 + beta_1*X_i + epsilon_i
#Sample of Y-values from model
# Plot the Data and Fitted Model
mylm <- lm(Y_i ~ X_i)            #Fit Model to Data
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),
widths=c(2,2,2), heights=c(4,2,2))
#create plot panel
plot(Y_i ~ X_i,                  #Plot the data
pch=16,
col="darkgray",
xlim=c(0,20),
ylim=c(0,100),
main="An Outlier Present")
abline(mylm, col="gray")         #Add fitted line to plot
abline(beta_0, beta_1,           #Add True line to plot
col="gray", lty=2)
#Summarize the Model Fit
pander(rbind(`Y-Intercept` = c(True = beta_0, Estimated = mylm$coef[[1]]),
Slope = c(True = beta_1, Estimated = mylm$coef[[2]]),
Sigma = c(True = sigma, Estimated = summary(mylm)$sigma)))
#Add summary to plot
legend("topleft", legend=c(paste("Y-Intercept:", round(mylm$coef[[1]], 3), "  (", beta_0, ")"),
paste("Slope:", round(mylm$coef[[2]], 3), "  (", beta_1, ")"),
paste("Sigma:", round(summary(mylm)$sigma, 3), "  (", sigma, ")")), bty='n')
#Draw diagnostic plots
plot(mylm, which=1:2)
plot(mylm$residuals, ylab="Residuals")
mtext("Residuals vs Order", side=3)
# Create Data from a True Model
n <- 30                           #sample size
beta_0 <- 14.2                    #True y-intercept
beta_1 <- 3.5                     #True slope
X_i <- runif(n, 0, 20)            #Sample of X-values
sigma <- 2.5                      #True standard deviation
epsilon_i <- rnorm(n, 0, sigma)   #normally distributed errors
epsilon_i[3] <- ifelse(X_i[3] < 10, runif(1,25,35), -runif(1,25,35))
#create outlier
Y_i <- beta_0 + beta_1*X_i + epsilon_i
#Sample of Y-values from model
# Plot the Data and Fitted Model
mylm <- lm(Y_i ~ X_i)            #Fit Model to Data
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),
widths=c(2,2,2), heights=c(4,2,2))
#create plot panel
plot(Y_i ~ X_i,                  #Plot the data
pch=16,
col="darkgray",
xlim=c(0,20),
ylim=c(0,100),
main="An Outlier Present")
abline(mylm, col="gray")         #Add fitted line to plot
abline(beta_0, beta_1,           #Add True line to plot
col="gray", lty=2)
#Summarize the Model Fit
pander(rbind(`Y-Intercept` = c(True = beta_0, Estimated = mylm$coef[[1]]),
Slope = c(True = beta_1, Estimated = mylm$coef[[2]]),
Sigma = c(True = sigma, Estimated = summary(mylm)$sigma)))
#Add summary to plot
legend("topleft", legend=c(paste("Y-Intercept:", round(mylm$coef[[1]], 3), "  (", beta_0, ")"),
paste("Slope:", round(mylm$coef[[2]], 3), "  (", beta_1, ")"),
paste("Sigma:", round(summary(mylm)$sigma, 3), "  (", sigma, ")")), bty='n')
#Draw diagnostic plots
plot(mylm, which=1:2)
plot(mylm$residuals, ylab="Residuals")
mtext("Residuals vs Order", side=3)
# Create Data from a True Model
n <- 30                           #sample size
beta_0 <- 14.2                    #True y-intercept
beta_1 <- 3.5                     #True slope
X_i <- runif(n, 0, 20)            #Sample of X-values
sigma <- 2.5                      #True standard deviation
epsilon_i <- rnorm(n, 0, sigma)   #normally distributed errors
epsilon_i[3] <- ifelse(X_i[3] < 10, runif(1,25,35), -runif(1,25,35))
#create outlier
Y_i <- beta_0 + beta_1*X_i + epsilon_i
#Sample of Y-values from model
# Plot the Data and Fitted Model
mylm <- lm(Y_i ~ X_i)            #Fit Model to Data
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),
widths=c(2,2,2), heights=c(4,2,2))
#create plot panel
plot(Y_i ~ X_i,                  #Plot the data
pch=16,
col="darkgray",
xlim=c(0,20),
ylim=c(0,100),
main="An Outlier Present")
abline(mylm, col="gray")         #Add fitted line to plot
abline(beta_0, beta_1,           #Add True line to plot
col="gray", lty=2)
#Summarize the Model Fit
pander(rbind(`Y-Intercept` = c(True = beta_0, Estimated = mylm$coef[[1]]),
Slope = c(True = beta_1, Estimated = mylm$coef[[2]]),
Sigma = c(True = sigma, Estimated = summary(mylm)$sigma)))
#Add summary to plot
legend("topleft", legend=c(paste("Y-Intercept:", round(mylm$coef[[1]], 3), "  (", beta_0, ")"),
paste("Slope:", round(mylm$coef[[2]], 3), "  (", beta_1, ")"),
paste("Sigma:", round(summary(mylm)$sigma, 3), "  (", sigma, ")")), bty='n')
#Draw diagnostic plots
plot(mylm, which=1:2)
plot(mylm$residuals, ylab="Residuals")
mtext("Residuals vs Order", side=3)
# Create Data from a True Model
n <- 30                           #sample size
beta_0 <- 14.2                    #True y-intercept
beta_1 <- 3.5                     #True slope
X_i <- runif(n, 0, 20)            #Sample of X-values
sigma <- 2.5                      #True standard deviation
epsilon_i <- rnorm(n, 0, sigma)   #normally distributed errors
epsilon_i[3] <- ifelse(X_i[3] < 10, runif(1,25,35), -runif(1,25,35))
#create outlier
Y_i <- beta_0 + beta_1*X_i + epsilon_i
#Sample of Y-values from model
# Plot the Data and Fitted Model
mylm <- lm(Y_i ~ X_i)            #Fit Model to Data
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),
widths=c(2,2,2), heights=c(4,2,2))
#create plot panel
plot(Y_i ~ X_i,                  #Plot the data
pch=16,
col="darkgray",
xlim=c(0,20),
ylim=c(0,100),
main="An Outlier Present")
abline(mylm, col="gray")         #Add fitted line to plot
abline(beta_0, beta_1,           #Add True line to plot
col="gray", lty=2)
#Summarize the Model Fit
pander(rbind(`Y-Intercept` = c(True = beta_0, Estimated = mylm$coef[[1]]),
Slope = c(True = beta_1, Estimated = mylm$coef[[2]]),
Sigma = c(True = sigma, Estimated = summary(mylm)$sigma)))
#Add summary to plot
legend("topleft", legend=c(paste("Y-Intercept:", round(mylm$coef[[1]], 3), "  (", beta_0, ")"),
paste("Slope:", round(mylm$coef[[2]], 3), "  (", beta_1, ")"),
paste("Sigma:", round(summary(mylm)$sigma, 3), "  (", sigma, ")")), bty='n')
#Draw diagnostic plots
plot(mylm, which=1:2)
plot(mylm$residuals, ylab="Residuals")
mtext("Residuals vs Order", side=3)
# Create Data from a True Model
n <- 30                           #sample size
beta_0 <- 14.2                    #True y-intercept
beta_1 <- 3.5                     #True slope
X_i <- runif(n, 0, 20)            #Sample of X-values
sigma <- 2.5                      #True standard deviation
epsilon_i <- rnorm(n, 0, sigma)   #normally distributed errors
epsilon_i[3] <- ifelse(X_i[3] < 10, runif(1,25,35), -runif(1,25,35))
#create outlier
Y_i <- beta_0 + beta_1*X_i + epsilon_i
#Sample of Y-values from model
# Plot the Data and Fitted Model
mylm <- lm(Y_i ~ X_i)            #Fit Model to Data
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),
widths=c(2,2,2), heights=c(4,2,2))
#create plot panel
plot(Y_i ~ X_i,                  #Plot the data
pch=16,
col="darkgray",
xlim=c(0,20),
ylim=c(0,100),
main="An Outlier Present")
abline(mylm, col="gray")         #Add fitted line to plot
abline(beta_0, beta_1,           #Add True line to plot
col="gray", lty=2)
#Summarize the Model Fit
pander(rbind(`Y-Intercept` = c(True = beta_0, Estimated = mylm$coef[[1]]),
Slope = c(True = beta_1, Estimated = mylm$coef[[2]]),
Sigma = c(True = sigma, Estimated = summary(mylm)$sigma)))
#Add summary to plot
legend("topleft", legend=c(paste("Y-Intercept:", round(mylm$coef[[1]], 3), "  (", beta_0, ")"),
paste("Slope:", round(mylm$coef[[2]], 3), "  (", beta_1, ")"),
paste("Sigma:", round(summary(mylm)$sigma, 3), "  (", sigma, ")")), bty='n')
#Draw diagnostic plots
plot(mylm, which=1:2)
plot(mylm$residuals, ylab="Residuals")
mtext("Residuals vs Order", side=3)
# Create Data from a True Model
n <- 30                           #sample size
beta_0 <- 14.2                    #True y-intercept
beta_1 <- 3.5                     #True slope
X_i <- runif(n, 0, 20)            #Sample of X-values
sigma <- 2.5                      #True standard deviation
epsilon_i <- rnorm(n, 0, sigma)   #normally distributed errors
epsilon_i[3] <- ifelse(X_i[3] < 10, runif(1,25,35), -runif(1,25,35))
#create outlier
Y_i <- beta_0 + beta_1*X_i + epsilon_i
#Sample of Y-values from model
# Plot the Data and Fitted Model
mylm <- lm(Y_i ~ X_i)            #Fit Model to Data
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),
widths=c(2,2,2), heights=c(4,2,2))
#create plot panel
plot(Y_i ~ X_i,                  #Plot the data
pch=16,
col="darkgray",
xlim=c(0,20),
ylim=c(0,100),
main="An Outlier Present")
abline(mylm, col="gray")         #Add fitted line to plot
abline(beta_0, beta_1,           #Add True line to plot
col="gray", lty=2)
#Summarize the Model Fit
pander(rbind(`Y-Intercept` = c(True = beta_0, Estimated = mylm$coef[[1]]),
Slope = c(True = beta_1, Estimated = mylm$coef[[2]]),
Sigma = c(True = sigma, Estimated = summary(mylm)$sigma)))
#Add summary to plot
legend("topleft", legend=c(paste("Y-Intercept:", round(mylm$coef[[1]], 3), "  (", beta_0, ")"),
paste("Slope:", round(mylm$coef[[2]], 3), "  (", beta_1, ")"),
paste("Sigma:", round(summary(mylm)$sigma, 3), "  (", sigma, ")")), bty='n')
#Draw diagnostic plots
plot(mylm, which=1:2)
plot(mylm$residuals, ylab="Residuals")
mtext("Residuals vs Order", side=3)
# Create Data from a True Model
n <- 30                           #sample size
beta_0 <- 14.2                    #True y-intercept
beta_1 <- 3.5                     #True slope
X_i <- runif(n, 0, 20)            #Sample of X-values
sigma <- 2.5                      #True standard deviation
epsilon_i <- rnorm(n, 0, sigma)   #normally distributed errors
epsilon_i[3] <- ifelse(X_i[3] < 10, runif(1,25,35), -runif(1,25,35))
#create outlier
Y_i <- beta_0 + beta_1*X_i + epsilon_i
#Sample of Y-values from model
# Plot the Data and Fitted Model
mylm <- lm(Y_i ~ X_i)            #Fit Model to Data
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),
widths=c(2,2,2), heights=c(4,2,2))
#create plot panel
plot(Y_i ~ X_i,                  #Plot the data
pch=16,
col="darkgray",
xlim=c(0,20),
ylim=c(0,100),
main="An Outlier Present")
abline(mylm, col="gray")         #Add fitted line to plot
abline(beta_0, beta_1,           #Add True line to plot
col="gray", lty=2)
#Summarize the Model Fit
pander(rbind(`Y-Intercept` = c(True = beta_0, Estimated = mylm$coef[[1]]),
Slope = c(True = beta_1, Estimated = mylm$coef[[2]]),
Sigma = c(True = sigma, Estimated = summary(mylm)$sigma)))
#Add summary to plot
legend("topleft", legend=c(paste("Y-Intercept:", round(mylm$coef[[1]], 3), "  (", beta_0, ")"),
paste("Slope:", round(mylm$coef[[2]], 3), "  (", beta_1, ")"),
paste("Sigma:", round(summary(mylm)$sigma, 3), "  (", sigma, ")")), bty='n')
#Draw diagnostic plots
plot(mylm, which=1:2)
plot(mylm$residuals, ylab="Residuals")
mtext("Residuals vs Order", side=3)
# Create Data from a True Model
n <- 30                           #sample size
beta_0 <- 14.2                    #True y-intercept
beta_1 <- 3.5                     #True slope
X_i <- runif(n, 0, 20)            #Sample of X-values
sigma <- 2.5                      #True standard deviation
epsilon_i <- rnorm(n, 0, sigma)   #normally distributed errors
epsilon_i[3] <- ifelse(X_i[3] < 10, runif(1,25,35), -runif(1,25,35))
#create outlier
Y_i <- beta_0 + beta_1*X_i + epsilon_i
#Sample of Y-values from model
# Plot the Data and Fitted Model
mylm <- lm(Y_i ~ X_i)            #Fit Model to Data
layout(matrix(c(1,1,1,2,3,4), 2, 3, byrow = TRUE),
widths=c(2,2,2), heights=c(4,2,2))
#create plot panel
plot(Y_i ~ X_i,                  #Plot the data
pch=16,
col="darkgray",
xlim=c(0,20),
ylim=c(0,100),
main="An Outlier Present")
abline(mylm, col="gray")         #Add fitted line to plot
abline(beta_0, beta_1,           #Add True line to plot
col="gray", lty=2)
#Summarize the Model Fit
pander(rbind(`Y-Intercept` = c(True = beta_0, Estimated = mylm$coef[[1]]),
Slope = c(True = beta_1, Estimated = mylm$coef[[2]]),
Sigma = c(True = sigma, Estimated = summary(mylm)$sigma)))
#Add summary to plot
legend("topleft", legend=c(paste("Y-Intercept:", round(mylm$coef[[1]], 3), "  (", beta_0, ")"),
paste("Slope:", round(mylm$coef[[2]], 3), "  (", beta_1, ")"),
paste("Sigma:", round(summary(mylm)$sigma, 3), "  (", sigma, ")")), bty='n')
#Draw diagnostic plots
plot(mylm, which=1:2)
plot(mylm$residuals, ylab="Residuals")
mtext("Residuals vs Order", side=3)
plot(olm, which = 1:2)
olm <- lm(circumference ~ age, data = Orange)
llm <- lm(height ~ age, data = Loblolly)
mlm <- lm(mpg ~ qsec, data = mtcars)
plot(olm, which = 1:2)
plot(olm$residuals, seq_len(length(olm$residuals)))
plot(olm$residuals ~ seq_len(length(olm$residuals)))
plot(llm, which = 1:2)
plot(llm$residuals ~ seq_len(length(llm$residuals)))
plot(mlm, which = 1:2)plot
(mlm$residuals ~ seq_len(length(mlm$residuals)))
plot(mlm$residuals ~ seq_len(length(mlm$residuals)))
plot(mlm, which = 1:2)
plot(mlm$residuals ~ seq_len(length(mlm$residuals)))
plot(llm, which = 1:2)
plot(llm, which = 1:2)
plot(llm$residuals ~ seq_len(length(llm$residuals)))
plot(circumference ~ age, data = Orange)
plot(height ~ age, data = Loblolly)
plot(mpg ~ qsec, data = mtcars)
plot(olm, which = 1:2)
plot(olm, which = 1:2)
plot(llm, which = 1:2)
plot(llm$residuals ~ seq_len(length(llm$residuals)))
plot(llm, which = 1:2)
plot(mlm, which = 1:2)
plot(mlm$residuals ~ seq_len(length(mlm$residuals)))
?Davis
library(car)
?Davis
davislm <- lm(height ~ weight, data = Davis)
davislm
plot(davislm, which = 1:2)
plot(davislm, which = 1:2)
plot(davislm$residuals ~ seq_len(length(davislm$residuals)))
plot(height ~ weight, data = Davis)
abline(davislm$coefficients[1], davislm$coefficients[2])
plot(davislm, which = 1:2)
Davis[12]
Davis[12,1]
Davis[[12]]
View(Davis)
summary(davislm)
plot(davislm, which = 1:2)
plot(davislm$residuals ~ seq_len(length(davislm$residuals)))
# Oh so we're just removing it. That makes it easier. I guess this isn't the data wrangling class.
View(Davis[-12])
# Oh so we're just removing it. That makes it easier. I guess this isn't the data wrangling class.
View(Davis[-12,])
# Oh so we're just removing it. That makes it easier. I guess this isn't the data wrangling class.
Davis_fixed <- Davis[-12,]
davislm2 <- lm(height ~ weight, data = Davis_fixed)
plot(height ~ weight, data = Davis)
abline(davislm$coefficients[1], davislm$coefficients[2])
abline(davislm2$coefficients[1], davislm2$coefficients[2], col = "#736232")
abline(davislm2$coefficients[1], davislm2$coefficients[2], col = "#F02030")
abline(davislm$coefficients[1], davislm$coefficients[2], lwd = 1)
abline(davislm$coefficients[1], davislm$coefficients[2], lwd = 2)
plot(height ~ weight, data = Davis, pch = 16)
abline(davislm$coefficients[1], davislm$coefficients[2], lwd = 2)
abline(davislm2$coefficients[1], davislm2$coefficients[2], col = "#F02030", lwd = 2)
plot(height ~ weight, data = Davis)
abline(davislm$coefficients[1], davislm$coefficients[2], lwd = 2)
abline(davislm2$coefficients[1], davislm2$coefficients[2], col = "#F02030", lwd = 2)
legend(5, 110, legend = c(expression(hat(Y)), expression(bar(Y))),
lty = c(1, 2), cex = 0.8, bty = "n", col = "gray", text.col = "gray")
legend(5, 110, legend = c(("Original Line"), ("New Line")), cex = 0.8, bty = "n", col = c("black", "#F02030"), text.col = "gray")
legend(50, 120, legend = c(("Original Line"), ("New Line")), cex = 0.8, bty = "n", col = c("black", "#F02030"), text.col = "gray")
legend(50, 120, legend = c(("Original Line"), ("New Line")), lty = 1 cex = 0.8, bty = "n", col = c("black", "#F02030"), text.col = "gray")
legend(50, 120, legend = c(("Original Line"), ("New Line")), lty = 1, cex = 0.8, bty = "n", col = c("black", "#F02030"), text.col = "gray")
legend(50, 120, legend = c(("Original Line"), ("New Line")), lty = 1, lwd = 2, cex = 0.8, bty = "n", col = c("black", "#F02030"), text.col = "gray")
plot(height ~ weight, data = Davis)
abline(davislm$coefficients[1], davislm$coefficients[2], lwd = 2)
abline(davislm2$coefficients[1], davislm2$coefficients[2], col = "#F02030", lwd = 2)
legend(105, 160, legend = c(("Original Line"), ("New Line")), lty = 1, lwd = 2, cex = 0.8, bty = "n", col = c("black", "#F02030"))
davislm2$terms
davislm2$coefficients[1]
davislm2$coefficients[2]
summary(davislm2)
plot(davislm2, which = 1:2)
plot(davislm2$residuals ~ seq_len(length(davislm2$residuals)))
ggplot(f1_scores, aes(x = distance, y = f1_score)) +
geom_point() +
geom_abline(slope = scores_lm$coefficients[2], intercept = scores_lm$coefficients[1]) +
labs(x = "Distance Between Clusters in Terms of the Clusters' Standard Deviation", y = "F1-Score", main = "Relationship between the Relative Distance of Two Clusters and the F1-Score of K-Nearest Neighbors")
library(tidyverse)
# I have created non-tidy data! Let's fix it.
f1_scores <- read_csv("data/f1_scores.csv") %>% select(-c("X1")) %>% gather(0.25, 0.50, 1.00, 2.00,  key = "distance", value = "f1_score")
f1_scores$distance <- as.numeric(f1_scores$distance)
scores_lm <- lm(f1_score ~ distance, data = f1_scores)
ggplot(f1_scores, aes(x = distance, y = f1_score)) +
geom_point() +
geom_abline(slope = scores_lm$coefficients[2], intercept = scores_lm$coefficients[1]) +
labs(x = "Distance Between Clusters in Terms of the Clusters' Standard Deviation", y = "F1-Score", main = "Relationship between the Relative Distance of Two Clusters and the F1-Score of K-Nearest Neighbors")
# I have created non-tidy data! Let's fix it.
f1_scores <- read_csv("data/f1_scores.csv") %>% select(-c("X1")) %>% gather(0.25, 0.50, 1.00, 2.00,  key = "distance", value = "f1_score")
f1_scores$distance <- as.numeric(f1_scores$distance)
setwd("C:/Users/Jim/Desktop/MATH 325/Math 325 Notebook/Math 425")
# I have created non-tidy data! Let's fix it.
f1_scores <- read_csv("data/f1_scores.csv") %>% select(-c("X1")) %>% gather(0.25, 0.50, 1.00, 2.00,  key = "distance", value = "f1_score")
f1_scores$distance <- as.numeric(f1_scores$distance)
scores_lm <- lm(f1_score ~ distance, data = f1_scores)
library(tidyverse)
setwd("C:/Users/Jim/Desktop/MATH 325/Math 325 Notebook/Math 425")
# I have created non-tidy data! Let's fix it.
f1_scores <- read_csv("data/f1_scores.csv") %>% select(-c("X1")) %>% gather(0.25, 0.50, 1.00, 2.00,  key = "distance", value = "f1_score")
f1_scores$distance <- as.numeric(f1_scores$distance)
scores_lm <- lm(f1_score ~ distance, data = f1_scores)
scores_lm <- lm(f1_score ~ distance, data = f1_scores)
# I have created non-tidy data! Let's fix it.
f1_scores <- read_csv("data/f1_scores.csv") %>% select(-c("X1")) %>% gather(0.25, 0.50, 1.00, 2.00, key = "distance", value = "f1_score")
f1_scores$distance <- as.numeric(f1_scores$distance)
# I have created non-tidy data! Let's fix it.
f1_scores <- read_csv("data/f1_scores.csv") %>% select(-c("X1")) %>% gather('0.25', '0.50', '1.00', '2.00', key = "distance", value = "f1_score")
f1_scores$distance <- as.numeric(f1_scores$distance)
scores_lm <- lm(f1_score ~ distance, data = f1_scores)
ggplot(f1_scores, aes(x = distance, y = f1_score)) +
geom_point() +
geom_abline(slope = scores_lm$coefficients[2], intercept = scores_lm$coefficients[1]) +
labs(x = "Distance Between Clusters in Terms of the Clusters' Standard Deviation", y = "F1-Score", main = "Relationship between the Relative Distance of Two Clusters and the F1-Score of K-Nearest Neighbors")
ggplot(f1_scores, aes(x = distance, y = f1_score)) +
geom_point() +
geom_abline(slope = scores_lm$coefficients[2], intercept = scores_lm$coefficients[1]) +
labs(x = "Distance Between Clusters in Terms of the Clusters' Standard Deviation", y = "F1-Score", title = "Relationship between the Relative Distance of Two Clusters and the F1-Score of K-Nearest Neighbors")
scores_lm
# I have created non-tidy data! Let's fix it.
f1_scores <- read_csv("data/f1_scores.csv") %>% select(-c("X1")) %>% gather('0.25', '0.50', '1.00', '2.00', key = "distance", value = "score")
f1_scores$distance <- as.numeric(f1_scores$distance)
scores_lm <- lm(score ~ distance, data = f1_scores)
f1_scores$score <- f_scores$score / (1 - f_scores$score)
f1_scores$score <- f1_scores$score / (1 - f1_scores$score)
f1_scores
f1_odds <- f1_scores
# I have created non-tidy data! Let's fix it.
f1_scores <- read_csv("data/f1_scores.csv") %>% select(-c("X1")) %>% gather('0.25', '0.50', '1.00', '2.00', key = "distance", value = "score")
f1_scores$distance <- as.numeric(f1_scores$distance)
scores_lm <- lm(score ~ distance, data = f1_scores)
f1_odds <- f1_scores
f1_odds$score <- f1_scores$score / (1 - f1_scores$score)
f1_scores
f1_odds
tail(f1_odds)
?mutate
# I have created non-tidy data! Let's fix it.
f1_scores <- read_csv("data/f1_scores.csv") %>% select(-c("X1")) %>% gather('0.25', '0.50', '1.00', '2.00', key = "distance", value = "score")
f1_scores$distance <- as.numeric(f1_scores$distance)
f1_scores <- mutate(f1_scores, odds = score / (1 - score))
f1_scores
tail(f1_odds)
tail(f1_scores)
odds_lm <- lm(odds ~ distance, f1_scores)
odds_lm <- lm(odds ~ distance, data = f1_scores)
View(f1_scores)
f1_scores <- mutate(f1_scores, odds = (score != 1)*(score / (1 - score)) + (score == 1)*50)
odds_lm <- lm(odds ~ distance, data = f1_scores)
View(f1_scores)
f1_scores <- mutate(f1_scores, odds = ((score != 1)*(score / (1 - score)) + (score == 1)*50))
odds_lm <- lm(odds ~ distance, data = f1_scores)
View(f1_scores)
f1_scores <- mutate(f1_scores, odds = ifelse(score == 1, 50, score / (1 - score)))
odds_lm <- lm(odds ~ distance, data = f1_scores)
odds_lm <- lm(odds ~ distance, data = f1_scores)
plot(odds ~ distance, f1_scores)
# I have created non-tidy data! Let's fix it.
f1_scores <- read_csv("data/f1_scores.csv") %>% select(-c("X1")) %>% gather('0.25', '0.50', '1.00', '2.00', key = "distance", value = "score")
f1_scores$distance <- as.numeric(f1_scores$distance)
f1_scores <- mutate(f1_scores, log_odds = ifelse(score == 1, 50, log(score / (1 - score))))
odds_lm <- lm(log_odds ~ distance, data = f1_scores)
plot(log_odds ~ distance, f1_scores)
f1_scores <- mutate(f1_scores, log_odds = ifelse(score == 1, log(50), log(score / (1 - score))))
odds_lm <- lm(log_odds ~ distance, data = f1_scores)
plot(log_odds ~ distance, f1_scores)
plot(score ~ distance, f1_scores)
